{
  "name": "stack (api + frontend)",
  "dockerComposeFile": ["../docker-compose.yml", "../docker-compose.dev.yml"],
  "service": "api",

  // Open the repo root in VS Code
  "workspaceFolder": "/workspaces/stack-root",

  "mounts": [
    "source=${localWorkspaceFolder},target=/workspaces/stack-root,type=bind,consistency=cached",
    "source=vscode-server,target=/home/app-user/.vscode-server,type=volume",
    "source=composer-cache,target=/home/app-user/.composer/cache,type=volume",
    "source=pnpm-store,target=/pnpm-store,type=volume"
  ],

  "runServices": ["api", "web", "db", "cache", "mail", "frontend", "caddy"],
  "overrideCommand": false,

  "remoteUser": "app-user",
  "remoteEnv": {
    "SHELL": "/bin/bash",
    "HOME": "/home/app-user",
    "VSCODE_AGENT_FOLDER": "/home/app-user/.vscode-server"
  },
  "containerEnv": {
    "VSCODE_AGENT_FOLDER": "/home/app-user/.vscode-server",
    "XDEBUG_MODE": "${localEnv:XDEBUG_MODE:off}",
    "PNPM_STORE_DIR": "/pnpm-store"
  },

  "features": {
    "ghcr.io/devcontainers/features/common-utils:2": {
      "username": "app-user",
      "uid": "1000",
      "gid": "1000",
      "updateRemoteUserUID": true
    },
    "ghcr.io/devcontainers/features/node:1": {
      "version": "22",
      "nodeGypDependencies": false
    }
  },

  "forwardPorts": [8080, 3307, 6380, 8025, 1025, 5173],
  "otherPortsAttributes": { "onAutoForward": "notify" },
  "shutdownAction": "stopCompose",

  "customizations": {
    "vscode": {
      "settings": {
        // Terminals start in the repo root
        "terminal.integrated.cwd": "/workspaces/stack-root",

        "terminal.integrated.defaultProfile.linux": "bash",
        "terminal.integrated.profiles.linux": {
          "bash": { "path": "/bin/bash", "args": ["-l"] }
        },

        // PHP & Laravel
        "intelephense.environment.phpVersion": "8.3",
        "intelephense.environment.includePaths": [
          "/workspaces/stack-root/apps/backend/vendor"
        ],
        "php.validate.executablePath": "/usr/local/bin/php",

        // Frontend (Nuxt 2 + Vue 2 with pnpm store volume)
        "typescript.tsdk": "apps/frontend/node_modules/typescript/lib",
        "eslint.workingDirectories": [
          { "directory": "apps/frontend", "changeProcessCWD": true }
        ],
        "jest.jestCommandLine": "pnpm test:unit --",
        "jest.rootPath": "apps/frontend",

        // Ignore noise
        "files.exclude": { "**/.git": true, "**/.DS_Store": true },
        "files.watcherExclude": {
          "**/node_modules/**": true,
          "**/vendor/**": true,
          "**/storage/**": true
        },
        "search.exclude": {
          "**/node_modules": true,
          "**/vendor": true,
          "**/storage": true
        },

        "editor.formatOnSave": true
      }
    }
  },

  // Post-create ensures backend is bootstrapped
  "postCreateCommand": "sh -lc 'set -eux; \
  # ensure dirs and perms
  mkdir -p /home/app-user/.vscode-server \
           /workspaces/stack-root/apps/backend/storage \
           /workspaces/stack-root/apps/backend/bootstrap/cache; \
  chown -R app-user:app-user /home/app-user \
           /workspaces/stack-root/apps/backend/storage \
           /workspaces/stack-root/apps/backend/bootstrap/cache || true; \
  # backend bootstrap
  cd /workspaces/stack-root/apps/backend; \
  if [ ! -f vendor/autoload.php ] && [ -f composer.json ]; then composer install --no-interaction --prefer-dist; fi; \
  [ -f .env ] || cp .env.example .env || true; \
  grep -qE \"^APP_KEY=base64:.+\" .env || php artisan key:generate --force; \
  # run migrations if DB is reachable, no-op if already up-to-date
  php -r \"exit(@fsockopen(\\\"db\\\",3306)?0:1);\" && php artisan migrate --force --no-interaction || true \
'"


}
