name: ${COMPOSE_PROJECT_NAME}

services:
  api:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
      target: base
    container_name: ${COMPOSE_PROJECT_NAME}_api
    environment:
      APP_ENV: local
      APP_DEBUG: "true"
      COMPOSER_CACHE_DIR: /composer-cache
      XDEBUG_MODE: ${XDEBUG_MODE:-off}
    volumes:
      - ./apps/backend:/var/www/html
      - vendor_cache:/var/www/html/vendor
      - composer_cache:/composer-cache
    tmpfs:
      - /var/www/html/storage/framework/cache
      - /var/www/html/bootstrap/cache
      - /tmp:rw,noexec,nosuid,nodev
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", 'php -r ''exit(@fsockopen("127.0.0.1",9000)?0:1);''']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    expose:
      - "9000"
    # Tier 0 baseline

  web:
    image: nginx:alpine
    container_name: ${COMPOSE_PROJECT_NAME}_web
    volumes:
      - ./apps/backend:/var/www/html:ro
      - ./apps/backend/docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "${WEB_PORT:-8080}:80"
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD-SHELL",
          '(wget -qO- http://127.0.0.1/api/healthz || wget -qO- http://127.0.0.1/api/health) | grep -q ''"ok":true''',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    # Tier 0 baseline

  caddy:
    image: caddy:2
    container_name: ${COMPOSE_PROJECT_NAME}_caddy
    restart: unless-stopped
    depends_on:
      web:
        condition: service_started
    ports:
      - "80:80"
      - "443:443"
    environment:
      - DOMAIN=${DOMAIN}
    volumes:
      - caddy_data:/data
      - caddy_config:/config
      - ./infra/ssl/Caddyfile:/etc/caddy/Caddyfile:ro
      - ./infra/ssl/certs:/etc/certs:ro
    profiles: ["ssl"]

  db:
    image: mysql:8.4
    container_name: ${COMPOSE_PROJECT_NAME}_db
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-app_db}
      MYSQL_USER: ${MYSQL_USER:-app_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-app_pass}
    ports:
      - "${DB_PORT:-3307}:3306"
    volumes:
      - db_data:/var/lib/mysql
      - ./infra/db/init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "mysqladmin ping -u${MYSQL_USER:-app_user} -p${MYSQL_PASSWORD:-app_pass} -h localhost",
        ]
      interval: 20s
      timeout: 5s
      retries: 10
    # Tier 0 baseline

  cache:
    image: redis:7-alpine
    container_name: ${COMPOSE_PROJECT_NAME}_cache
    ports:
      - "${REDIS_PORT:-6380}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 5s
    # Tier 0 baseline

  mail:
    image: axllent/mailpit:latest
    container_name: ${COMPOSE_PROJECT_NAME}_mail
    ports:
      - "8025:8025"
      - "1025:1025"
    # Tier 0 baseline

  frontend:
    image: node:22-alpine
    container_name: ${COMPOSE_PROJECT_NAME}_ui
    working_dir: /usr/src/app
    command: >
      sh -lc '
        corepack enable &&
        corepack prepare pnpm@10.15.1 --activate &&
        pnpm install --frozen-lockfile &&
        pnpm dev --host 0.0.0.0
      '
    ports:
      - "${UI_PORT:-5173}:5173"
    volumes:
      - ./apps/frontend:/usr/src/app
      - pnpm_store:/pnpm-store
    profiles: ["ui"]

  horizon:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
      target: development # or base in CI/prod-like
    container_name: ${COMPOSE_PROJECT_NAME}_horizon
    working_dir: /var/www/html
    command: sh -lc "php artisan horizon"
    depends_on:
      api:
        condition: service_started
      cache:
        condition: service_started
    environment:
      APP_ENV: local
      APP_DEBUG: "true"
      QUEUE_CONNECTION: redis
    volumes:
      - ./apps/backend:/var/www/html
    profiles: ["delivery"]

  prometheus:
    image: prom/prometheus:latest
    container_name: ${COMPOSE_PROJECT_NAME}_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infra/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    profiles: ["monitoring"]

  grafana:
    image: grafana/grafana:latest
    container_name: ${COMPOSE_PROJECT_NAME}_grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    profiles: ["monitoring"]

  loki:
    image: grafana/loki:2.9.8
    container_name: ${COMPOSE_PROJECT_NAME}_loki
    command: ["-config.file=/etc/loki/config.yaml"]
    volumes:
      - ./infra/logging/loki/config.yaml:/etc/loki/config.yaml:ro
    ports:
      - "3100:3100"
    profiles: ["logging"]

  otel-collector:
    image: otel/opentelemetry-collector:latest
    container_name: ${COMPOSE_PROJECT_NAME}_otel
    command: ["--config=/etc/otelcol/config.yaml"]
    volumes:
      - ./infra/tracing/otel/config.yaml:/etc/otelcol/config.yaml:ro
    ports:
      - "4317:4317"
      - "4318:4318"
      - "13133:13133"
    profiles: ["tracing"]

  prism:
    image: stoplight/prism:4
    container_name: ${COMPOSE_PROJECT_NAME}_prism
    command: ["mock", "-h", "0.0.0.0", "/openapi/openapi.yaml"]
    volumes:
      - ./infra/mock/openapi.yaml:/openapi/openapi.yaml:ro
    ports:
      - "4010:4010"
    profiles: ["mock"]

volumes:
  db_data:
  vendor_cache:
  composer_cache:
  grafana_data:
  pnpm_store:
  caddy_data:
  caddy_config:
