openapi: 3.0.3
info:
  title: AcmeCart Backoffice API
  version: 0.1.0
  description: >
    Contract-first spec for Customers, Orders, and OrderItems used by
    plenipotentiary-laravel. Token-based auth (MVP). Cursor pagination.
servers:
  - url: https://{host}/api
    variables:
      host:
        default: backoffice.acmecart.local
        description: API host

tags:
  - name: Customers
  - name: Orders
  - name: OrderItems

security:
  - tokenAuth: []

paths:
  /customers:
    get:
      tags: [Customers]
      summary: List customers
      parameters:
        - $ref: "#/components/parameters/pageCursor"
        - $ref: "#/components/parameters/pageLimit"
      responses:
        "200":
          description: OK
          headers:
            X-RateLimit-Remaining:
              schema: { type: integer }
              description: Remaining calls in the current window.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedCustomers"
    post:
      tags: [Customers]
      summary: Create customer
      parameters:
        - $ref: "#/components/parameters/IdempotencyKey"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/CustomerCreate" }
      responses:
        "201":
          description: Created
          headers:
            Location:
              schema: { type: string, format: uri }
              description: URL of the new resource.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Customer" }
        "422": { $ref: "#/components/responses/ValidationError" }

  /customers/{customerId}:
    get:
      tags: [Customers]
      summary: Get customer
      parameters:
        - $ref: "#/components/parameters/customerId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Customer" }
        "404": { $ref: "#/components/responses/NotFound" }
    patch:
      tags: [Customers]
      summary: Update customer
      parameters:
        - $ref: "#/components/parameters/customerId"
        - $ref: "#/components/parameters/IdempotencyKey"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/CustomerUpdate" }
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Customer" }
        "404": { $ref: "#/components/responses/NotFound" }
        "422": { $ref: "#/components/responses/ValidationError" }
    delete:
      tags: [Customers]
      summary: Delete customer
      parameters:
        - $ref: "#/components/parameters/customerId"
      responses:
        "204": { description: No Content }
        "404": { $ref: "#/components/responses/NotFound" }

  /orders:
    get:
      tags: [Orders]
      summary: List orders
      parameters:
        - $ref: "#/components/parameters/pageCursor"
        - $ref: "#/components/parameters/pageLimit"
        - in: query
          name: customer_id
          schema: { type: string }
          description: Filter by customer.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/PaginatedOrders" }
    post:
      tags: [Orders]
      summary: Create order
      parameters:
        - $ref: "#/components/parameters/IdempotencyKey"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/OrderCreate" }
      responses:
        "201":
          description: Created
          headers:
            Location:
              schema: { type: string, format: uri }
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Order" }
        "422": { $ref: "#/components/responses/ValidationError" }

  /orders/{orderId}:
    get:
      tags: [Orders]
      summary: Get order
      parameters:
        - $ref: "#/components/parameters/orderId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Order" }
        "404": { $ref: "#/components/responses/NotFound" }
    patch:
      tags: [Orders]
      summary: Update order (status, notes)
      parameters:
        - $ref: "#/components/parameters/orderId"
        - $ref: "#/components/parameters/IdempotencyKey"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/OrderUpdate" }
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Order" }
        "404": { $ref: "#/components/responses/NotFound" }
        "422": { $ref: "#/components/responses/ValidationError" }
    delete:
      tags: [Orders]
      summary: Cancel/Delete order
      parameters:
        - $ref: "#/components/parameters/orderId"
      responses:
        "204": { description: No Content }
        "404": { $ref: "#/components/responses/NotFound" }

  /orders/{orderId}/items:
    get:
      tags: [OrderItems]
      summary: List items on an order
      parameters:
        - $ref: "#/components/parameters/orderId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/OrderItems" }
    post:
      tags: [OrderItems]
      summary: Add item to order
      parameters:
        - $ref: "#/components/parameters/orderId"
        - $ref: "#/components/parameters/IdempotencyKey"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/OrderItemCreate" }
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/OrderItem" }
        "422": { $ref: "#/components/responses/ValidationError" }

  /orders/{orderId}/items/{itemId}:
    patch:
      tags: [OrderItems]
      summary: Update order item (qty, price)
      parameters:
        - $ref: "#/components/parameters/orderId"
        - $ref: "#/components/parameters/itemId"
        - $ref: "#/components/parameters/IdempotencyKey"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/OrderItemUpdate" }
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/OrderItem" }
        "404": { $ref: "#/components/responses/NotFound" }
        "422": { $ref: "#/components/responses/ValidationError" }
    delete:
      tags: [OrderItems]
      summary: Remove order item
      parameters:
        - $ref: "#/components/parameters/orderId"
        - $ref: "#/components/parameters/itemId"
      responses:
        "204": { description: No Content }
        "404": { $ref: "#/components/responses/NotFound" }

components:
  securitySchemes:
    tokenAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    customerId:
      name: customerId
      in: path
      required: true
      schema: { type: string }
    orderId:
      name: orderId
      in: path
      required: true
      schema: { type: string }
    itemId:
      name: itemId
      in: path
      required: true
      schema: { type: string }
    pageCursor:
      name: cursor
      in: query
      required: false
      schema: { type: string }
      description: Cursor supplied by previous page; omit for first page.
    pageLimit:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 200
        default: 50
      description: Page size.
    IdempotencyKey:
      name: Idempotency-Key
      in: header
      required: false
      schema: { type: string, maxLength: 64 }
      description: Client-generated key to make POST/PATCH idempotent.

  responses:
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Error" }
    ValidationError:
      description: Validation failed
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ValidationError" }

  schemas:
    Customer:
      type: object
      required: [id, email, created_at]
      properties:
        id: { type: string }
        email: { type: string, format: email }
        name: { type: string, nullable: true }
        phone: { type: string, nullable: true }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time, nullable: true }

    CustomerCreate:
      type: object
      required: [email]
      properties:
        email: { type: string, format: email }
        name: { type: string, nullable: true }
        phone: { type: string, nullable: true }

    CustomerUpdate:
      type: object
      additionalProperties: false
      properties:
        email: { type: string, format: email }
        name: { type: string, nullable: true }
        phone: { type: string, nullable: true }

    Order:
      type: object
      required:
        [id, customer_id, currency, total_minor, status, created_at, items]
      properties:
        id: { type: string }
        customer_id: { type: string }
        currency: { type: string, example: GBP }
        total_minor:
          { type: integer, description: Total in minor units (e.g., pence) }
        status:
          type: string
          enum: [draft, placed, paid, fulfilled, cancelled]
        notes: { type: string, nullable: true }
        items:
          $ref: "#/components/schemas/OrderItems"
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time, nullable: true }

    OrderCreate:
      type: object
      required: [customer_id, currency, items]
      properties:
        customer_id: { type: string }
        currency: { type: string, example: GBP }
        notes: { type: string, nullable: true }
        items:
          type: array
          items: { $ref: "#/components/schemas/OrderItemCreate" }

    OrderUpdate:
      type: object
      additionalProperties: false
      properties:
        status:
          type: string
          enum: [draft, placed, paid, fulfilled, cancelled]
        notes: { type: string, nullable: true }

    OrderItem:
      type: object
      required: [id, sku, name, qty, price_minor]
      properties:
        id: { type: string }
        sku: { type: string }
        name: { type: string }
        qty: { type: integer, minimum: 1 }
        price_minor: { type: integer, description: Unit price in minor units }
        total_minor: { type: integer }

    OrderItemCreate:
      type: object
      required: [sku, name, qty, price_minor]
      properties:
        sku: { type: string }
        name: { type: string }
        qty: { type: integer, minimum: 1 }
        price_minor: { type: integer }

    OrderItemUpdate:
      type: object
      additionalProperties: false
      properties:
        qty: { type: integer, minimum: 1 }
        price_minor: { type: integer }

    OrderItems:
      type: array
      items: { $ref: "#/components/schemas/OrderItem" }

    PaginatedCustomers:
      type: object
      required: [data]
      properties:
        data:
          type: array
          items: { $ref: "#/components/schemas/Customer" }
        next_cursor:
          type: string
          nullable: true
        limit:
          type: integer

    PaginatedOrders:
      type: object
      required: [data]
      properties:
        data:
          type: array
          items: { $ref: "#/components/schemas/Order" }
        next_cursor:
          type: string
          nullable: true
        limit:
          type: integer

    Error:
      type: object
      required: [code, message]
      properties:
        code: { type: string, example: validation_error }
        message: { type: string }
        details:
          type: array
          items:
            type: object
            properties:
              field: { type: string }
              message: { type: string }

    ValidationError:
      allOf:
        - $ref: "#/components/schemas/Error"
      example:
        code: validation_error
        message: "Validation failed"
        details:
          - field: email
            message: "Invalid email format"
